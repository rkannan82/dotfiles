let mapleader=","
let maplocalleader="\\"

" Needed to manage plugins.
so ${DOTFILES_DIR}/vim/vundles.vim

" Import all other VIM settings
so ${DOTFILES_DIR}/vim/settings.vim

" Auto commands {{{
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}

" Options {{{
filetype plugin on
filetype indent on

set hls
set nu
set ruler
set vb t_vb=
set autoindent
set incsearch
set ignorecase
set smartcase
set noic
set showmode
let loaded_matchparen=1
set updatetime=1000
set showtabline=0
set modifiable
set nobackup
set nowb
set noswapfile
set expandtab
set cursorline
set smarttab
" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2
" auto format lines using textwidth
set textwidth=80
set formatoptions+=t
set completeopt+=longest

set laststatus=2

" don't display welcome
set shortmess+=I

" qq to record, Q to replay
nnoremap Q @q
" }}}

" Mappings {{{
inoremap <leader><leader> <Esc>

nnoremap <leader>w :update<cr>
nnoremap <leader>/ :noh<CR>
nnoremap <leader>1 :setlocal number!<CR>
nnoremap <leader>p :set paste!<CR>
nnoremap <silent> <leader>q :QFix<CR>
nnoremap <leader>g :execute "grep! -R " . shellescape(expand("<cWORD>")) . " " . expand('%:p')<cr>:copen<cr>
" }}}

" Functions {{{
" Show highlighting group used at the cursor
function! HighlightGroup()
echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
  \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
  \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"
endfunction
" }}}

" Toggle quickfix {{{
command -bang -nargs=? QFix call QFixToggle(<bang>0)
function! QFixToggle(forced)
  if exists("g:qfix_win") && a:forced == 0
    cclose
    unlet g:qfix_win
  else
    copen 10
    let g:qfix_win = bufnr("$")
  endif
endfunction
" }}}
